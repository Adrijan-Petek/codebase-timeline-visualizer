name: Release Notes

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to generate release notes for'
        required: true

jobs:
  release-notes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate release notes
      uses: actions/github-script@v7
      with:
        script: |
          const tag = context.payload.release?.tag_name || context.payload.inputs?.tag;

          if (!tag) {
            console.log('No tag specified');
            return;
          }

          // Get commits since last release
          const { data: commits } = await github.rest.repos.listCommits({
            owner: context.repo.owner,
            repo: context.repo.repo,
            since: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString() // Last 30 days
          });

          // Categorize commits
          const categories = {
            features: [],
            fixes: [],
            docs: [],
            other: []
          };

          commits.forEach(commit => {
            const message = commit.commit.message.toLowerCase();
            if (message.includes('feat') || message.includes('add')) {
              categories.features.push(commit);
            } else if (message.includes('fix') || message.includes('bug')) {
              categories.fixes.push(commit);
            } else if (message.includes('doc') || message.includes('readme')) {
              categories.docs.push(commit);
            } else {
              categories.other.push(commit);
            }
          });

          // Generate release notes
          let notes = `# Release ${tag}\n\n`;

          if (categories.features.length > 0) {
            notes += '## ✨ New Features\n';
            categories.features.slice(0, 10).forEach(commit => {
              notes += `- ${commit.commit.message.split('\n')[0]}\n`;
            });
            notes += '\n';
          }

          if (categories.fixes.length > 0) {
            notes += '## 🐛 Bug Fixes\n';
            categories.fixes.slice(0, 10).forEach(commit => {
              notes += `- ${commit.commit.message.split('\n')[0]}\n`;
            });
            notes += '\n';
          }

          if (categories.docs.length > 0) {
            notes += '## 📚 Documentation\n';
            categories.docs.slice(0, 5).forEach(commit => {
              notes += `- ${commit.commit.message.split('\n')[0]}\n`;
            });
            notes += '\n';
          }

          notes += `## 📊 Statistics\n`;
          notes += `- Total commits: ${commits.length}\n`;
          notes += `- Features: ${categories.features.length}\n`;
          notes += `- Bug fixes: ${categories.fixes.length}\n`;
          notes += `- Documentation: ${categories.docs.length}\n\n`;

          notes += '---\n\n';
          notes += '*This release was automatically generated.*';

          // Update release with enhanced notes
          if (context.payload.release) {
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: notes
            });
          }

          console.log(notes);

  update-changelog:
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Update CHANGELOG.md
      run: |
        # Create or update changelog
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi

        # Add new entry at the top
        temp_file=$(mktemp)
        echo "## [${{ github.event.release.tag_name }}] - $(date +%Y-%m-%d)" > "$temp_file"
        echo "" >> "$temp_file"

        # Add release notes
        echo "${{ github.event.release.body }}" >> "$temp_file"
        echo "" >> "$temp_file"
        echo "" >> "$temp_file"

        # Append existing changelog
        cat CHANGELOG.md >> "$temp_file"
        mv "$temp_file" CHANGELOG.md

    - name: Commit changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "docs: update changelog for ${{ github.event.release.tag_name }}" || echo "No changes to commit"

    - name: Push changes
      uses: actions/github-script@v7
      with:
        script: |
          try {
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main',
              sha: (await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'heads/main'
              })).data.object.sha
            });
          } catch (error) {
            console.log('Could not update main branch:', error.message);
          }