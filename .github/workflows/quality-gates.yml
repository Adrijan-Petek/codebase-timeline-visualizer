name: Code Quality Gates

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  quality-gate:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install radon pylint bandit safety

    - name: Run pylint
      run: |
        pylint backend/src cli/src --output-format=json > pylint-report.json || true

    - name: Run bandit (security)
      run: |
        bandit -r backend/src cli/src -f json -o bandit-report.json || true

    - name: Run radon (complexity)
      run: |
        radon cc backend/src cli/src > complexity-report.txt || true
        radon mi backend/src cli/src > maintainability-report.txt || true

    - name: Check code quality metrics
      run: |
        # Check if any files exceed complexity threshold
        if grep -q "CC" complexity-report.txt; then
          echo "High complexity detected:"
          cat complexity-report.txt
        fi

        # Check pylint score
        python -c "
        import json
        try:
          with open('pylint-report.json', 'r') as f:
            data = json.load(f)
            if data:
              scores = [item.get('score', 10) for item in data if 'score' in item]
              avg_score = sum(scores) / len(scores) if scores else 10
              print(f'Average pylint score: {avg_score:.2f}')
              if avg_score < 7:
                print('WARNING: Code quality score is below threshold')
                exit(1)
        except:
          print('No pylint report found')
        "

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          pylint-report.json
          bandit-report.json
          complexity-report.txt
          maintainability-report.txt

  sonarcloud:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.organization=${{ github.repository_owner }}
          -Dsonar.projectKey=${{ github.repository_owner }}_codebase-timeline-visualizer