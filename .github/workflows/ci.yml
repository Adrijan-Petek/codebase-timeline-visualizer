name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov black flake8 mypy

    - name: Lint with flake8
      run: |
        flake8 backend/src --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check --diff backend/src cli/src

    - name: Type check with mypy
      run: |
        mypy backend/src --ignore-missing-imports

    - name: Run tests
      run: |
        pytest backend/tests/ -v --cov=backend/src --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Lint frontend code
      run: |
        cd frontend
        npm run lint || echo "No lint script found"

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
      env:
        CI: true

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, frontend-test]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create test repository
      run: |
        mkdir test-repo
        cd test-repo
        git init
        git config user.name "Test User"
        git config user.email "test@example.com"

        # Create initial files
        echo "print('hello')" > main.py
        echo "# Test Repo" > README.md
        git add .
        git commit -m "Initial commit"

        # Make some changes
        echo "print('hello world')" > main.py
        git add .
        git commit -m "Update main.py"

        echo "def test():" >> main.py
        echo "    pass" >> main.py
        git add .
        git commit -m "Add test function"

    - name: Test CLI analyze command
      run: |
        python -m cli.src.main analyze ./test-repo --output test_timeline.json

    - name: Verify output file
      run: |
        ls -la test_timeline.json
        python -c "import json; data=json.load(open('test_timeline.json')); print(f'Found {data[\"metadata\"][\"total_commits\"]} commits')"