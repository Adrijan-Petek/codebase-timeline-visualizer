name: Cross-Platform Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC

jobs:
  test-cross-platform:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.10']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        pytest backend/tests/ -v --cov=backend/src --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      with:
        file: ./coverage.xml
        flags: ${{ matrix.os }}

  performance-test:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.pull_request.labels.*.name, 'performance')

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark

    - name: Create large test repository
      run: |
        mkdir perf-test-repo
        cd perf-test-repo
        git init
        git config user.name "Performance Test"
        git config user.email "perf@test.com"

        # Create many files and commits
        for i in {1..100}; do
          echo "print('file $i')" > "file_$i.py"
        done
        git add .
        git commit -m "Initial commit with 100 files"

        # Add more commits
        for i in {1..50}; do
          echo "print('updated file $i')" > "file_$i.py"
          git add .
          git commit -m "Update batch $i"
        done

    - name: Run performance tests
      run: |
        python -c "
        import time
        from backend.src.main import analyze_repository

        start_time = time.time()
        data = analyze_repository('./perf-test-repo', 'perf_timeline.json')
        end_time = time.time()

        analysis_time = end_time - start_time
        print(f'Analysis time: {analysis_time:.2f} seconds')
        print(f'Commits processed: {data[\"metadata\"][\"total_commits\"]}')
        print(f'Files processed: {data[\"metadata\"][\"total_files\"]}')

        # Save performance metrics
        with open('perf_results.json', 'w') as f:
            import json
            json.dump({
                'analysis_time': analysis_time,
                'commits': data['metadata']['total_commits'],
                'files': data['metadata']['total_files']
            }, f)
        "

    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: perf_results.json